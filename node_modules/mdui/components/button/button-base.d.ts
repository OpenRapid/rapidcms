import { MduiElement } from '@mdui/shared/base/mdui-element.js';
import '../circular-progress.js';
import type { CSSResultGroup, PropertyValues, TemplateResult } from 'lit';
type RenderButtonOptions = {
    id?: string;
    className?: string;
    part?: string;
    content?: TemplateResult | TemplateResult[];
    tabindex?: number;
};
declare const ButtonBase_base: import("@open-wc/dedupe-mixin").Constructor<import("@mdui/shared/mixins/anchor.js").AnchorMixinInterface> & import("@open-wc/dedupe-mixin").Constructor<import("../ripple/ripple-mixin.js").RippleMixinInterface> & import("@open-wc/dedupe-mixin").Constructor<import("@mdui/shared/mixins/focusable.js").FocusableMixinInterface> & typeof MduiElement;
export declare class ButtonBase<E> extends ButtonBase_base<E> {
    static styles: CSSResultGroup;
    /**
     * 是否禁用
     */
    disabled: boolean;
    /**
     * 是否为加载中状态
     */
    loading: boolean;
    /**
     * 按钮的名称，将与表单数据一起提交
     *
     * **Note**：仅在未指定 `href` 属性时可用
     */
    name: string;
    /**
     * 按钮的初始值，将与表单数据一起提交
     *
     * **Note**：仅在未指定 `href` 属性时可用
     */
    value: string;
    /**
     * 按钮的类型。默认值为 `button`。可选值为：
     *
     * * `submit`：点击按钮将表单数据提交给服务器
     * * `reset`：点击按钮将表单中所有组件重置为初始值
     * * `button`：按钮没有默认行为
     *
     * **Note**：仅在未指定 `href` 属性时可用
     */
    type: /*此按钮将表单数据提交给服务器*/ 'submit' | /*此按钮重置所有组件为初始值*/ 'reset' | /*此按钮没有默认行为*/ 'button';
    /**
     * 关联的 `form` 元素。此属性值必须为同一页面中的一个 `<form>` 元素的 `id` 属性。
     *
     * 如果此属性未指定，则元素必须是 `form` 元素的后代。利用此属性，你可以将元素放置在页面中的任何位置，而不仅仅是作为 `form` 元素的后代。
     *
     * **Note**：仅在未指定 `href` 属性时可用
     */
    form?: string;
    /**
     *
     * 指定提交表单的 URL。
     *
     * 指定了该属性时，将覆盖 `form` 元素的 `action` 属性。
     *
     * **Note**：仅在未指定 `href` 属性、且 `type="submit"` 时可用。
     */
    formAction?: string;
    /**
     * 指定提交表单到服务器的内容类型。可选值为：
     *
     * * `application/x-www-form-urlencoded`：未指定属性时的默认值
     * * `multipart/form-data`：当表单包含 `<input type="file">` 元素时使用此值
     * * `text/plain`：出现于 HTML5，用于调试
     *
     * 指定了该属性时，将覆盖 `form` 元素的 `enctype` 属性。
     *
     * **Note**：仅在未指定 `href` 属性、且 `type="submit"` 时可用
     */
    formEnctype?: /*未指定属性时的默认值*/ 'application/x-www-form-urlencoded' | /*当表单包含 `<input type="file">` 元素时使用此值*/ 'multipart/form-data' | /*出现于 HTML5，用于调试*/ 'text/plain';
    /**
     * 指定提交表单使用的 HTTP 方法。可选值为：
     *
     * * `post`：来自表单的数据被包含在表单内容中，被发送到服务器
     * * `get`：来自表单的数据以 `?` 作为分隔符被附加到 form 的 URI 属性中，得到的 URI 被发送到服务器。当表单没有副作用，且仅包含 ASCII 字符时使用这种方法
     *
     * 指定了该属性时，将覆盖 `form` 元素的 `method` 属性。
     *
     * **Note**：仅在未指定 `href` 属性、且 `type="submit"` 时可用。
     */
    formMethod?: /*来自表单的数据被包含在表单内容中，被发送到服务器*/ 'post' | /*来自表单的数据以 `?` 作为分隔符被附加到 form 的 URI 属性中，得到的 URI 被发送到服务器。当表单没有副作用，且仅包含 ASCII 字符时使用这种方法*/ 'get';
    /**
     * 指定了该属性时，表示当表单被提交时不需要验证。
     *
     * 指定了该属性时，将覆盖 `form` 元素的 `novalidate` 属性。
     *
     * **Note**：仅在未指定 `href` 属性、且 `type="submit"` 时可用。
     */
    formNoValidate: boolean;
    /**
     * 在何处显示提交表单后接收到的响应。可选值为：
     *
     * * `_self`：默认。在同一框架中打开
     * * `_blank`：在新窗口中打开
     * * `_parent`：在父框架中打开
     * * `_top`：在整个窗口中打开
     *
     * 指定了该属性时，将覆盖 `form` 元素的 `target` 属性。
     *
     * **Note**：仅在未指定 `href` 属性、且 `type="submit"` 时可用
     */
    formTarget?: /*默认。在同一框架中打开*/ '_self' | /*在新窗口中打开*/ '_blank' | /*在父框架中打开*/ '_parent' | /*在整个窗口中打开*/ '_top';
    private readonly formController;
    /**
     * 表单验证状态对象
     */
    get validity(): ValidityState | undefined;
    /**
     * 表单验证的错误提示信息
     */
    get validationMessage(): string | undefined;
    protected get rippleDisabled(): boolean;
    protected get focusElement(): HTMLElement | null;
    protected get focusDisabled(): boolean;
    /**
     * 检查表单字段是否验证通过。若未通过则返回 `false`，并触发 `invalid` 事件；若验证通过，则返回 `true`
     */
    checkValidity(): boolean;
    /**
     * 检查表单字段是否验证通过。若未通过则返回 `false`，并触发 `invalid` 事件；若验证通过，则返回 `true`。
     *
     * 验证未通过时，还将在组件上显示未通过的提示。
     */
    reportValidity(): boolean;
    /**
     * 设置自定义的错误提示文本。只要文本不为空，则表示字段验证未通过
     *
     * @param message 自定义的提示文本
     */
    setCustomValidity(message: string): void;
    protected firstUpdated(_changedProperties: PropertyValues): void;
    protected renderLoading(): TemplateResult;
    protected renderButton({ id, className, part, content, }: RenderButtonOptions): TemplateResult;
    protected isButton(): boolean;
}
export {};
